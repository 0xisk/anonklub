import { MerkleTree, ProofRequest } from '@anonklub/proof'
import {
  MembershipProver, MerkleProof, Poseidon, Tree, defaultPubkeyMembershipPConfig
} from "@personaelabs/spartan-ecdsa";
import { useEffect, useState } from 'react'
import { useAccount, useSignMessage } from 'wagmi'
import { config } from '#'
import { useStore } from './useStore'
import { useMerkleTreeWasmWorker } from './useMerkleTreeWasm';

export const useProofRequest = () => {
  const { isConnected, address } = useAccount()
  const { anonSet, proofRequest, setProofRequest } = useStore()
  const [message, setMessage] = useState('')
  const {
    data: rawSignature,
    isError,
    isLoading,
    isSuccess,
    reset,
    signMessage,
  } = useSignMessage({
    message,
  })

  const { generateMerkleProof } = useMerkleTreeWasmWorker();

  useEffect(() => {
    reset()
  }, [message, reset])

  const canSign = message !== '' && rawSignature === undefined && isConnected
  const canSubmit = isSuccess && anonSet !== null && proofRequest !== null

  function serializeWithBigInt(obj) {
    return JSON.stringify(obj, (key, value) =>
      typeof value === 'bigint' ? value.toString() : value
    );
  }

  const generateMerkleProo2 = async (): Promise<MerkleProof> => {
    const poseidon = new Poseidon();
    await poseidon.initWasm();

    const treeDepth = 15;
    const tree = new Tree(treeDepth, poseidon);

    if (!anonSet) throw new Error("AnonSet is empty");

    if (!address) throw new Error("Address is not set");

    const proverAddress = BigInt(address.toLowerCase());
    console.log("==> AnonSet members total number is ", anonSet.length);
    console.log("==> Prover Address", address.toLowerCase());

    const serializedProof = localStorage.getItem("merkleProof_15");

    if (serializedProof) {
      console.log("==> Merkle Proof data is found in the local storage!");
      const merkleProof = JSON.parse(serializedProof);
      return merkleProof;
    } else {
      console.log("==> Merkle Proof data is not found in the local storage!");
      tree.insert(proverAddress);

      // Insert other members into the tree, skipping addresses[0]
      for (let i = 1; i < anonSet.length; i++) {
        if (i === 32767) break;
        const member = anonSet[i];

        const wrongAddressConversion = "0x" + Buffer.from("".padStart(16, member), "utf16le").toString("hex");

        tree.insert(BigInt(member));

        console.log(`==> Tree member ${i}/${anonSet.length} ${member} is inserted`);
      }

      const index = tree.indexOf(proverAddress);
      const merkleProof = tree.createProof(index);

      // Serialize and store the tree and proof
      try {
        const serializedProof = serializeWithBigInt(merkleProof); // Adjust if necessary
        localStorage.setItem('merkleProof_15', serializedProof);
      } catch (error) {
        console.error('Error serializing with bigint the Merkle tree or proof:', error);
      }

      return merkleProof
    }
  }

  useEffect(() => {
    (async () => {
      if (message === '' || rawSignature === undefined || anonSet === null) return

      if (!address) throw new Error("Address is not set");

      const merkleProofBytes = await generateMerkleProof({
        leaves: anonSet,
        leaf: address.toLowerCase(),
        depth: 15
      });

      console.log("merkleProofBytes", merkleProofBytes);
      //const merkleProof = await generateMerkleProof();

      const merkleProof: any = {
        "siblings": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          62,
          163,
          97,
          230,
          172,
          2,
          95,
          137,
          43,
          158,
          251,
          31,
          203,
          249,
          76,
          120,
          142,
          219,
          40,
          41,
          191,
          16,
          81,
          160,
          14,
          121,
          106,
          211,
          120,
          58,
          37,
          36,
          89,
          234,
          167,
          18,
          245,
          47,
          228,
          51,
          164,
          145,
          254,
          236,
          116,
          237,
          137,
          245,
          120,
          109,
          23,
          149,
          173,
          146,
          52,
          217,
          16,
          192,
          66,
          72,
          51,
          54,
          204,
          250,
          214,
          30,
          198,
          128,
          157,
          88,
          225,
          15,
          210,
          49,
          176,
          5,
          192,
          83,
          40,
          236,
          26,
          122,
          88,
          244,
          112,
          207,
          11,
          208,
          126,
          166,
          126,
          217,
          102,
          55,
          2,
          249,
          70,
          71,
          214,
          33,
          192,
          226,
          168,
          159,
          127,
          129,
          218,
          232,
          41,
          54,
          149,
          225,
          213,
          32,
          229,
          57,
          132,
          245,
          86,
          200,
          183,
          195,
          224,
          192,
          68,
          58,
          222,
          199,
          173,
          33,
          106,
          77,
          136,
          205,
          142,
          84,
          144,
          253,
          149,
          98,
          229,
          191,
          93,
          147,
          167,
          2,
          253,
          131,
          43,
          28,
          210,
          215,
          79,
          20,
          237,
          151,
          117,
          145,
          177,
          77,
          153,
          208,
          235,
          154,
          47,
          251,
          103,
          232,
          138,
          42,
          201,
          68,
          64,
          174,
          240,
          55,
          63,
          2,
          58,
          202,
          239,
          104,
          209,
          147,
          249,
          219,
          67,
          198,
          149,
          135,
          176,
          132,
          153,
          149,
          182,
          113,
          230,
          250,
          109,
          11,
          57,
          42,
          153,
          138,
          219,
          215,
          0,
          133,
          48,
          162,
          230,
          157,
          55,
          201,
          164,
          154,
          100,
          125,
          43,
          55,
          180,
          27,
          30,
          127,
          64,
          210,
          125,
          0,
          79,
          139,
          197,
          226,
          58,
          4,
          52,
          139,
          42,
          58,
          220,
          33,
          215,
          174,
          187,
          21,
          103,
          4,
          101,
          34,
          36,
          168,
          3,
          181,
          176,
          233,
          169,
          20,
          214,
          2,
          88,
          106,
          17,
          34,
          181,
          184,
          17,
          111,
          50,
          196,
          255,
          134,
          243,
          168,
          51,
          233,
          99,
          28,
          59,
          103,
          171,
          121,
          35,
          200,
          83,
          197,
          225,
          131,
          170,
          253,
          214,
          182,
          9,
          156,
          5,
          177,
          136,
          176,
          222,
          58,
          103,
          3,
          130,
          223,
          195,
          180,
          201,
          128,
          213,
          33,
          81,
          226,
          30,
          85,
          33,
          81,
          117,
          255,
          85,
          44,
          147,
          182,
          78,
          14,
          56,
          86,
          167,
          135,
          178,
          147,
          222,
          0,
          161,
          113,
          224,
          202,
          88,
          48,
          32,
          198,
          235,
          146,
          11,
          71,
          79,
          53,
          111,
          136,
          60,
          105,
          138,
          245,
          207,
          25,
          156,
          147,
          129,
          86,
          164,
          95,
          107,
          247,
          75,
          8,
          168,
          119,
          35,
          121,
          31,
          70,
          57,
          48,
          216,
          138,
          14,
          56,
          126,
          111,
          11,
          79,
          119,
          35,
          113,
          108,
          80,
          2,
          236,
          255,
          21,
          109,
          253,
          128,
          215,
          111,
          30,
          7,
          198,
          22,
          120,
          250,
          32,
          129,
          76,
          38,
          13,
          117,
          244,
          234,
          46,
          180,
          46,
          56,
          64,
          153,
          130,
          9,
          40,
          66,
          11,
          7,
          95,
          199,
          143,
          199,
          242,
          232,
          186,
          172,
          52,
          84,
          157,
          244,
          121,
          150,
          208,
          205,
          200,
          194,
          197,
          101,
          249,
          84,
          58,
          255,
          174,
          44,
          65,
          174,
          193,
          228,
          100,
          138,
          155,
          93,
          202,
          116,
          59,
          58,
          227,
          138,
          139,
          103,
          56,
          231,
          179,
          84,
          59,
          205,
          236,
          236
        ],
        "pathIndices": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "root": [
          96,
          44,
          196,
          48,
          152,
          5,
          133,
          202,
          35,
          75,
          51,
          57,
          29,
          33,
          134,
          81,
          85,
          229,
          53,
          97,
          5,
          233,
          100,
          121,
          234,
          237,
          16,
          221,
          100,
          252,
          144,
          66
        ]
      }

      console.log("==> Merkle Proof for the AnonSet tree is", merkleProof);

      setProofRequest(
        new ProofRequest({
          addresses: anonSet,
          merkleProof,
          message,
          rawSignature,
          url: config.urls.proveApi,
        }),
      )
    })()
  }, [canSign, canSubmit, message, rawSignature, anonSet])

  return {
    canSign,
    canSubmit,
    isError,
    isLoading,
    isSuccess,
    message,
    rawSignature,
    setMessage,
    signMessage,
  }
}
